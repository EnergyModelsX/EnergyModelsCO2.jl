var documenterSearchIndex = {"docs":
[{"location":"how-to/contribute/#how_to-contribute","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"Contributing to EnergyModelsCO2 can be achieved in several different ways.","category":"page"},{"location":"how-to/contribute/#File-a-bug-report","page":"Contribute to EnergyModelsCO2","title":"File a bug report","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"Another approach to contributing to EnergyModelsCO2 is through filing a bug report as an issue when unexpected behaviour is occuring.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"When filing a bug report, please follow the following guidelines:","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"Be certain that the bug is a bug and originating in EnergyModelsCO2:\nIf the problem is within the results of the optimization problem, please check first that the nodes are correctly linked with each other. Frequently, missing links (or wrongly defined links) restrict the transport of energy/mass. If you are certain that all links are set correctly, it is most likely a bug in EnergyModelsCO2 and should be reported.\nIf the problem occurs in model construction, it is most likely a bug in either EnergyModelsBase or EnergyModelsCO2 and should be reported in the respective package. The error message of Julia should provide you with the failing function and whether the failing function is located in EnergyModelsBase or EnergyModelsCO2. It can occur, that the last shown failing function is within JuMP or MathOptInterface. In this case, it is best to trace the error to the last called EnergyModelsBase or EnergyModelsCO2 function.\nIf the problem is only appearing for specific solvers, it is most likely not a bug in EnergyModelsCO2, but instead a problem of the solver wrapper for MathOptInterface. In this case, please contact the developers of the corresponding solver wrapper.\nLabel the issue as bug, and\nProvide a minimum working example of a case in which the bug occurs.","category":"page"},{"location":"how-to/contribute/#Feature-requests","page":"Contribute to EnergyModelsCO2","title":"Feature requests","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"EnergyModelsCO2 includes several new nodal descriptions for renewable energy producers. However, there can be a demand for additional requirements for the existing nodes or for new descriptions which fall below the umbrella of renewable energy producers. In this case, you can contribute through a feature request.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"Feature requests for EnergyModelsCO2 should follow the guidelines developed for EnergyModelsBase.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsCO2","title":"Contribute to EnergyModelsCO2","text":"note: Note\nEnergyModelsCO2 is slightly different than EnergyModelsBase.Contrary to the other package, we consider that it is beneficial to have all potential features of the CO₂ capture, transport, and storage chain within EnergyModelsCO2. Hence, if you have a requirement for a new nodal description, do not hesitate to create an issue.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit","page":"CO₂ retrofit","title":"CO₂ capture retrofit","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"A specific CO₂ source node is required as the default implementation of a RefSource does not allow for the CO₂ instance to be an output, as declared in the function constraints_flow_out. This is due to the implementation using CaptureData in which the CO₂ oulet flow is calculated through the implementation of the capture rate.","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Hence, it is necessary to implement a CO₂ source node if one wants to model only a CO₂ source.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-fields","page":"CO₂ retrofit","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"CO₂ capture retrofit requires the implementation of two additional node types, RefNetworkNodeRetrofit and CCSRetroFit both nodes are quite similar to a RefNetworkNode although their application differs:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"RefNetworkNodeRetrofit can be best seen as an existing technology to which CO₂ capture should be fitted.\nCCSRetroFit is the CO₂ capture unit.","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"danger: Implementation of retrofit\nIt is necessary to include both RefNetworkNodeRetrofit and CCSRetroFit if one wants to implement the additional installation of CO₂ capture. It is not possible to only use one of them.If you want to include several retrofit options, it is of absolute importance that you:directly couple the RefNetworkNodeRetrofit and CCSRetroFit nodes through a Link and\ndo not include the CO₂ proxy resource (see below) as a product in the Availability node.It would be otherwise possible to use a single CO₂ capture unit for all process with the option for retrofit, neglecting potential peak capacity requirements and economies of scale.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-fields-stand","page":"CO₂ retrofit","title":"Standard fields","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Both introduced nodes use the same fields, although their meaning may potentially differ. The standard fields are given as:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed capacity corresponds to the potential usage of the node.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ninfo: Meaning in boths nodes\nRefNetworkNodeRetrofit:\nThe capacity corresponds to the production capacity of a process.\nCCSRetroFit:\nThe capacity corresponds to the CO₂ flow rate handling capacity, not the CO₂ capture capacity\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ninfo: Meaning in boths nodes\nRefNetworkNodeRetrofit:\nThe variable OPEX is relative to the production of the main product.\nCCSRetroFit:\nThe variable OPEX is relative to the amount of flue gas handled, that is not the amount of CO₂ captured.\ninput::Dict{<:Resource, <:Real} and output::Dict{<:Resource, <:Real}:\nBoth fields describe the input and output Resources with their corresponding conversion factors as dictionaries.\nAll values have to be non-negative.\ninfo: Meaning in boths nodes\nRefNetworkNodeRetrofit:\nNo special meaning. The CO₂ proxy resource is automatically included in the output dictionary through providing additional methods to EMB.outputs.\nCCSRetroFit:\nThe CO₂ proxy resource is automatically included in the input dictionary through providing additional methods to EMB.inputs. Requires the incorporation of the  CO₂ resource in the output dictionary, although the exact value is not relevant. It is furthermore possible to specify additional reenergy required for capturing CO₂ using a conversion factor (e.g., MWh/t CO₂).\ndata::Vector{Data}:\nAn entry for providing additional data to the model. The data vector must include CaptureData for both RefNetworkNodeRetrofit and CCSRetroFit. It can include additional investment data when EnergyModelsInvestments is used.\ninfo: Meaning of the capture rate in both nodes\nRefNetworkNodeRetrofit:\nThe capture rate corresponds to the fraction of the flue gas which is sent to the CCSRetroFit node. Hence, if the value is below 1, only a fraction of the flue gas can be captured.\nCCSRetroFit:\nThe capture rate corresponds to\nthe fraction captured from the flue gas (CaptureFlueGas),\nthe fraction captured from the flue gas and the energy input to the unit (CaptureEnergyEmissions),\nthe fraction captured from the flue gas and the process emissions (CaptureProcessEmissions), or\nthe fraction captured from the flue gas, the energy input to the unit, and the process emissions (CaptureProcessEnergyEmissions)","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-fields-new","page":"CO₂ retrofit","title":"Additional fields","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Both introduced nodes have one additional field:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"co2_proxy::Resource:\nThe CO₂ proxy resource is introduced to simplify the analyses and seperate all streams corresponding to CO₂ from the CO₂ streams considered in CO₂ capture retrofit. It should be specified as ResourceCarrier with a CO₂ intensity of 0.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math","page":"CO₂ retrofit","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"with paranthesis.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-var","page":"CO₂ retrofit","title":"Variables","text":"","category":"section"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-var-stand","page":"CO₂ retrofit","title":"Standard variables","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Both introduced nodes utilize all standard variables from the RefNetworkNode, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out\ntextttemissions_node","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-add","page":"CO₂ retrofit","title":"Additional variables","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Both introduced nodes do not add additional variables.","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-con","page":"CO₂ retrofit","title":"Constraints","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"The following sections omit the direct inclusion of the vector of any node. Instead, it is implicitly assumed that the constraints are valid forall n  N for all RefNetworkNodeRetrofit or CCSRetroFit types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-con-stand","page":"CO₂ retrofit","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Both introduced nodes utilize in general the standard constraints described on Constraint functions. These standard constraints are:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"constraints_capacity:\ntextttcap_usen t leq textttcap_instn t\nconstraints_capacity_installed:\ntextttcap_instn t = capacity(n t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_flow_in:\ntextttflow_inn t p = inputs(n p) times textttcap_usen t\nqquad forall p in inputs(n)\nwarning: This standard constraint is only included for `RefNetworkNodeRetrofit`.\n\nconstraints_flow_out:\ntextttflow_outn t p =\noutputs(n p) times textttcap_usen t\nqquad forall p in outputs(n) setminus textCO_2\nwarning: This standard constraint is only included for `CCSRetroFit`.\n\nconstraints_opex_fixed:\ntextttopex_fixedn t_inv = opex_fixed(n t_inv) times textttcap_instn first(t_inv)\ntip: Why do we use `first()`\nThe variable textttcap_inst is declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacity in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\ntextttopex_varn t_inv = sum_t in t_inv opex_var(n t) times textttcap_usen t times scale_op_sp(t_inv t)\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the nodes, see above. This function is extended with multiple methods for both CCSRetroFit and RefNetworkNodeRetrofit. The individual methods are explained below.","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"The outlet flow constraint for a RefNetworkNodeRetrofit node is requires introducing new methods for the function constraints_flow_out as the outlet flow of the CO₂ proxy is calculated in the function constraints_data as outlined in Standard constraints. This constraint is given by:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"textttflow_outn t p =\noutputs(n p) times textttcap_usen t\nqquad forall p in outputs(n) setminus co2_proxy(n)","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"The introduction of the CO₂ capture unit as retrofit option requires introducing new methods for the function constraints_data for all CaptureData as described on Data functions. In all methods, the process emissions of the other ResourceEmits, that is all emissions resources except for CO₂, are calculated as","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"beginaligned\n  textttemissions_noden t p_em =  \n    textttcap_usen t times process_emissions(data p_em t)\n    qquad forall p_em in P^em setminus textCO_2\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"RefNetworkNodeRetrofit introduces methods for CaptureProcessEmissions, CaptureEnergyEmissions, and CaptureProcessEnergyEmissions.","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureProcessEmissions\nThe total produced CO₂ is calculated through an auxiliary expression as  CO2_totn t =\n    textttcap_usen t times process_emissions(data textCO_2 t)This auxiliary variable is subsequently used to calculate the CO₂ emissions of the node asbeginaligned\n  textttemissions_noden t textCO_2 =  \n    (1-co2_capture(data)) times  CO2_totn t +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureEnergyEmissions\nThe total produced CO₂ is calculated through an auxiliary expression as  CO2_totn t =\n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_inThis auxiliary variable is subsequently used to calculate the CO₂ emissions of the node asbeginaligned\n  textttemissions_noden t textCO_2 =  \n    (1-co2_capture(data)) times  CO2_totn t +  \n    textttcap_usen t times process_emissions(data textCO_2 t)\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureProcessEnergyEmissions\nThe total produced CO₂ is calculated through an auxiliary expression asbeginaligned\n  CO2_totn t =  \n    textttcap_usen t times process_emissions(data textCO_2 t) +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in\nendalignedThis auxiliary variable is subsequently used to calculate the CO₂ emissions of the node asbeginaligned\n  textttemissions_noden t textCO_2 =  \n    (1-co2_capture(data)) times  CO2_totn t +  \nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"These constraints are the same as it is the case for other nodes. The only difference is the calculation of the the outlet flow of the CO₂ proxy resource. It is for all CaptureData calculated as","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"  textttflow_outn t co2_proxy(n) = CO2_totn t * co2_capture(data)","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"CCSRetroFit introduces methods for CaptureFlueGas, CaptureProcessEmissions, CaptureEnergyEmissions, and CaptureProcessEnergyEmissions.","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"All types utilize similar functions although there is a variation in the individual calculations. The model introduces two auxiliaty expressiones, CO2_tot_n t and CO2_capturedn t. CO2_tot_n t representes the total produced CO₂ (flue gas from the RefNetworkNodeRetrofit and potentially energy usage related emissions and/or process emissions) in the capture unit. Hence, its calculation differes depending on the CaptureData. CO2_capturedn t is calculated as:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"  CO2_capturedn t =\n    co2_capture(data) times CO2_totn t","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"The CO₂ emissions are calculated for all types using the auxiliary variable CO2_capturedn t as","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"beginaligned\n  textttemissions_noden t textCO_2 =  \n    textttflow_inn t co2_proxy(n) +  \n    textttcap_usen t times process_emissions(data textCO_2 t) +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in -  \n    CO2_capturedn t\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"while the CO₂ outlet flow is given as:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"  textttflow_outn t textCO_2 = CO2_capturedn t","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureFlueGas\nThe total produced CO₂ is calculated as  CO2_totn t =\n    textttcap_usen tIn addition, we have to provide an upper limit on the outlet CO₂ flow to avoid achieving a higher capture rate than specified when the capture unit is dimensioned for a larger CO₂ proxy inlet flow rate:beginaligned\n  textttflow_outn t textCO_2 leq  \n    co2_capture(data) times  \n    textttflow_inn t co2_proxy(n)\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureProcessEmissions\nThe total produced CO₂ is calculated asbeginaligned\n  CO2_totn t =  \n    textttcap_usen t times (1 + process_emissions(data textCO_2 t))\nendalignedIn addition, we have to provide an upper limit on the outlet CO₂ flow to avoid achieving a higher capture rate than specified when the capture unit is dimensioned for a larger CO₂ proxy inlet flow rate:beginaligned\n  textttflow_outn t textCO_2 leq  \n    co2_capture(data) times  \n    (textttflow_inn t co2_proxy(n) +  \n    textttcap_usen t times process_emissions(data textCO_2 t))\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureEnergyEmissions\nThe total produced CO₂ is calculated asbeginaligned\n  CO2_totn t =  \n    textttcap_usen t +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in\nendalignedIn addition, we have to provide an upper limit on the outlet CO₂ flow to avoid achieving a higher capture rate than specified when the capture unit is dimensioned for a larger CO₂ proxy inlet flow rate:beginaligned\n  textttflow_outn t textCO_2 leq  \n    co2_capture(data) times  \n    (textttflow_inn t co2_proxy(n) +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in)\nendaligned","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"info: data::CaptureProcessEnergyEmissions\nThe total produced CO₂ is calculated through an auxiliary expression asbeginaligned\n  CO2_totn t =  \n    textttcap_usen t times (1 + process_emissions(data textCO_2 t)) +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in\nendalignedThis auxiliary variable is subsequently used to calculate the CO₂ emissions of the node asbeginaligned\n  textttflow_outn t textCO_2 leq   \n    co2_capture(data) times  \n    (textttflow_inn t co2_proxy(n) +  \n    textttcap_usen t times process_emissions(data textCO_2 t) +  \n    sum_p_in in P^in co2_int(p_in) times textttflow_inn t p_in)\nendaligned","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-con-add","page":"CO₂ retrofit","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-con-add-node","page":"CO₂ retrofit","title":"Constraints calculated in create_node","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"The inlet flow constraint for a CCSRetroFit node is calculated separately as the inlet flow of the CO₂ proxy is calculated in the function constraints_data as outlined in Standard constraints. This constraint is given by:","category":"page"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"textttflow_inn t p =\ninputs(n p) times textttcap_usen t\nqquad forall p in inputs(n) setminus co2_proxy(n)","category":"page"},{"location":"nodes/retrofit/#nodes-CCS_retrofit-math-con-add-fun","page":"CO₂ retrofit","title":"Constraints through separate functions","text":"","category":"section"},{"location":"nodes/retrofit/","page":"CO₂ retrofit","title":"CO₂ retrofit","text":"Neither RefNetworkNodeRetrofit nor CCSRetroFit nodes introduce new functions.","category":"page"},{"location":"library/internals/types/#int-types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/internals/types/#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"library/internals/types/#int-types-para","page":"Types","title":"Parameter types","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"EnergyModelsCO2.AccumulatingStrategic","category":"page"},{"location":"library/internals/types/#EnergyModelsCO2.AccumulatingStrategic","page":"Types","title":"EnergyModelsCO2.AccumulatingStrategic","text":"AccumulatingStrategic <: EMB.Accumulating\n\nStorageBehavior which accumulates all inflow witin a strategic period and transfers the level to the next strategic period. This approach is used for CO2Storage nodes.\n\n\n\n\n\n","category":"type"},{"location":"nodes/source/#nodes-co2_source","page":"CO₂ source","title":"CO₂ source node","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"A specific CO₂ source node is required as the default implementation of a RefSource does not allow for the CO₂ instance to be an output, as declared in the function constraints_flow_out. This is due to the implementation using CaptureData in which the CO₂ oulet flow is calculated through the implementation of the capture rate.","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"Hence, it is necessary to implement a CO₂ source node if one wants to model only a CO₂ source.","category":"page"},{"location":"nodes/source/#nodes-co2_source-fields","page":"CO₂ source","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"The CO2Source is implemented as equivalent to a RefSource. Hence, it utilizes the same functions declared in EnergyModelsBase.","category":"page"},{"location":"nodes/source/#nodes-co2_source-fields-stand","page":"CO₂ source","title":"Standard fields","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"The standard fields are given as:","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed capacity corresponds to the potential usage of the node.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\noutput::Dict{<:Resource, <:Real}:\nThe field output includes Resources with their corresponding conversion factors as dictionaries. In the case of a CO₂ source, output should always include CO₂. It is also possible to include other resources which are produced with a given correlation with CO₂.\nAll values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used or for additional emission data through EmissionsProcess. The latter would correspond to uncaptured CO₂ that should be included in the analyses.\nnote: Note\nThe field data is not required as we include a constructor when the value is excluded.\nwarning: Using `EmissionsData`\nCO₂ source nodes are not compatible with CaptureData. This is is also checked in the EnergyModelsBase.check_node function.CO₂ source nodes can only us EmissionsProcess.","category":"page"},{"location":"nodes/source/#nodes-co2_source-fields-new","page":"CO₂ source","title":"Additional fields","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"CO2Source nodes do not add additional fields compared to a RefSource.","category":"page"},{"location":"nodes/source/#nodes-co2_source-math","page":"CO₂ source","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"with paranthesis.","category":"page"},{"location":"nodes/source/#nodes-co2_source-math-var","page":"CO₂ source","title":"Variables","text":"","category":"section"},{"location":"nodes/source/#nodes-co2_source-math-var-stand","page":"CO₂ source","title":"Standard variables","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"The CO₂ source node types utilize all standard variables from the RefSource, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_out\ntextttemissions_node if EmissionsData is added to the field data","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"note: Note\nCO₂ source nodes are not compatible with CaptureData. Hence, you can only provide EmissionsProcess to the node.","category":"page"},{"location":"nodes/source/#nodes-co2_source-math-add","page":"CO₂ source","title":"Additional variables","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"CO2Source nodes do not add additional variables.","category":"page"},{"location":"nodes/source/#nodes-co2_source-math-con","page":"CO₂ source","title":"Constraints","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"The following sections omit the direct inclusion of the vector of CO₂ source nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N^textCO_2_source for all CO2Source types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/source/#nodes-co2_source-math-con-stand","page":"CO₂ source","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"CO₂ source nodes utilize in general the standard constraints described on Constraint functions. These standard constraints are:","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"constraints_capacity:\ntextttcap_usen t leq textttcap_instn t\nconstraints_capacity_installed:\ntextttcap_instn t = capacity(n t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_opex_fixed:\ntextttopex_fixedn t_inv = opex_fixed(n t_inv) times textttcap_instn first(t_inv)\ntip: Why do we use `first()`\nThe variable textttcap_inst is declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacity in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\ntextttopex_varn t_inv = sum_t in t_inv opex_var(n t) times textttcap_usen t times scale_op_sp(t_inv t)\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the CO₂ source, see above.","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"The function constraints_flow_out is extended with a new method for CO₂ source nodes to allow the inclusion of CO₂:","category":"page"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"textttflow_outn t p =\noutputs(n p) times textttcap_usen t\nqquad forall p in outputs(n)","category":"page"},{"location":"nodes/source/#nodes-co2_source-math-con-add","page":"CO₂ source","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/source/","page":"CO₂ source","title":"CO₂ source","text":"CO2Source nodes do not add additional constraints.","category":"page"},{"location":"manual/simple-example/#man-exampl","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"For the content of the example, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Examples","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"# Starts the Julia REPL\njulia> using EnergyModelsCO2\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsCO2), \"examples\")\n# Include the code into the Julia REPL to run the first example of the implementation of\n# CCS retrofit\njulia> include(joinpath(exdir, \"ccs_retrofit.jl\"))\n# Include the code into the Julia REPL to run the first example of the CO₂ Storage node\njulia> include(joinpath(exdir, \"co2_storage.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Examples","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"/path/to/EnergyModelsCO2.jl/examples $ julia ccs_retrofit.jl\n/path/to/EnergyModelsCO2.jl/examples $ julia co2_storage.jl","category":"page"},{"location":"manual/quick-start/#man-quick","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nInstall the package EnergyModelsBase and the time package TimeStruct, by running:\n] add TimeStruct\n] add EnergyModelsBase\nThis will fetch the packages from the CleanExport package registry.\nInstall the package EnergyModelsCO2\n] add EnergyModelsCO2","category":"page"},{"location":"library/internals/methods-EMB/#int-methods_EMB","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"","category":"section"},{"location":"library/internals/methods-EMB/#Index","page":"Methods - EnergyModelsBase","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"Pages = [\"methods-EMB.md\"]","category":"page"},{"location":"library/internals/methods-EMB/#int-methods_EMB-exten","page":"Methods - EnergyModelsBase","title":"Extension methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.variables_node\nEnergyModelsBase.create_node","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.variables_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.variables_node","text":"EMB.variables_node(m, 𝒩::Vector{<:CO2Storage}, 𝒯, modeltype::EnergyModel)\n\nCreate the optimization variable :stor_level_Δ_sp for every CO2Storage node. This variable accounts the increase in stor_level during a strategic period.\n\nThis method is called from EnergyModelsBase.jl.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.create_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.create_node","text":"create_node(m, n::CO2Storage, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSet all constraints for a CO2Storage node.\n\nIt differs from the function for a standard RefStorage node through modifying the flow to the node and not calling the functions constraints_flow_in and constraints_flow_out. The former is replaced with constraints directly within the function.\n\nCalled constraint functions\n\nconstraints_data for all node_data(n),\nconstraints_level,\nconstraints_capacity,\nconstraints_opex_fixed, and\nconstraints_opex_var.\n\n\n\n\n\ncreate_node(m, n::CCSRetroFit, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSet all constraints for a CCSRetroFit.\n\nIt differs from the function for a standard NetworkNode node through modifying the flow to the node for the CO₂ proxy resource. The function constraints_flow_in is hence not called.\n\nCalled constraint functions\n\nconstraints_data for all node_data(n),\nconstraints_flow_out,\nconstraints_capacity,\nconstraints_opex_fixed, and\nconstraints_opex_var.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#int-methods_EMB-con","page":"Methods - EnergyModelsBase","title":"Constraint methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.constraints_flow_out\nEnergyModelsBase.constraints_level_aux\nEnergyModelsBase.constraints_capacity\nEnergyModelsBase.constraints_data","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_flow_out","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_flow_out","text":"EMB.constraints_flow_out(m, n::CO2Source, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the outlet flow from CO2Source. The standard constraints_flow_out function does not allow CO₂ as an outlet flow as the CO₂ outlet flow is specified in the constraints_data function to implement CO₂ capture.\n\n\n\n\n\nEMB.constraints_flow_out(\n    m,\n    n::NetworkNodeWithRetrofit,\n    𝒯::TimeStructure,\n    modeltype::EnergyModel\n)\n\nFunction for creating the constraint on the outlet flow from NetworkNodeWithRetrofit. The standard constraints_flow_out function does allow for the CO₂ proxy as an outlet flow. In the case of retrofitting CO2 capture, this flow constraint is handlded\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_level_aux","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_level_aux","text":"EMB.constraints_level_aux(m, n::Storage, 𝒯, 𝒫, modeltype::EnergyModel)\n\nFunction for creating the Δ constraint for the level of a reference storage node with a ResourceCarrier resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_capacity","text":"EMB.constraints_capacity(m, n::CO2Storage, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum level of a CO2Storage node. As a CO2Storage node is accumulating, the upper bound is provided as well by the sum of the changes in all strategic periods.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_data","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_data","text":"EMB.constraints_data(\n    m,\n    n::NetworkNodeWithRetrofit,\n    𝒯,\n    𝒫,\n    modeltype::EnergyModel,\n    data::EmissionsData\n)\n\nConstraints functions for calculating both the emissions and amount of CO₂ captured in the process when CO₂ capture is included as retrofit. It works similar to the approach of EnergyModelsBase.\n\nThe functions are updated for a NetworkNodeWithRetrofit-node as the output is the CO₂ proxy and not CO₂.\n\n\n\n\n\nEMB.constraints_data(m, n::CCSRetroFit, 𝒯, 𝒫, modeltype::EnergyModel, data::EmissionsData)\n\nConstraints functions for calculating both the emissions and amount of CO₂ captured in the CO₂ capture unit.\n\nThere exist several configurations for incorporation of CO₂ capture:\n\ndata::CaptureProcessEnergyEmissions:\nCapture of both the flue gas emissions, process emissions, and energy usage related emissions.\ndata::CaptureEnergyEmissions:\nCapture of both the flue gas emissions and energy usage related emissions.\ndata::CaptureProcessEmissions:\nCapture of both the flue gas emissions and process emissions.\ndata::CaptureFlueGas:\nCapture only both the flue gas emissions.\n\nThe functions are updated for a CCSRetroFit-node as CO₂ emissions require a different calculation due to the inclusion of the CO₂ proxy resource for the flue gas.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#int-methods_EMB-util","page":"Methods - EnergyModelsBase","title":"Utility methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.previous_level\nEnergyModelsBase.inputs\nEnergyModelsBase.outputs","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.previous_level","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.previous_level","text":"EMB.previous_level(\n    m,\n    n::CO2Storage,\n    prev_pers::PreviousPeriods,\n    cyclic_pers::CyclicPeriods,\n    modeltype::EnergyModel,\n)\n\nAdding methods for the function EnergyModelsBase.previous_level for a CO2Storage node. the additional methods are only relevant for the first operational period of a strategic period while the framework utilizes the functions from EneryModelsBase for all other periods.\n\nprev_pers::PreviousPeriods{Nothing,Nothing,Nothing}\n\nThe previous level in the first operational period in the first representative period in the first strategic period is set to 0.\n\nThe reason for that is that the storage is considered to be empty in the beginning of the analysis.\n\n\n\n\n\nprev_pers::PreviousPeriods{<:TS.AbstractStrategicPeriod,Nothing,Nothing}\n\nThe previous level in the first operational period in the first representative period in all strategic periods except for the first is set to the accumulated value in the previous strategic periods.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.inputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.inputs","text":"EMB.inputs(n::CCSRetroFit)\nEMB.inputs(n::CCSRetroFit, p::Resource)\n\nWhen the node is a CCSRetroFit, it returns the co2_proxy resource in addition to the keys of the input dictionary.\n\nIf the resource p is specified, it returns the value of input resource p or 0 if p is the co2_proxy resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.outputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.outputs","text":"EMB.outputs(n::CO2Storage)\nEMB.outputs(n::CO2Storage, p::Resource)\n\nWhen the node is a CO2Storage, it returns an empty array.\n\nIf the resource p is specified, it returns a value of 0.\n\n\n\n\n\nEMB.outputs(n::NetworkNodeWithRetrofit)\nEMB.outputs(n::NetworkNodeWithRetrofit, p::Resource)\n\nWhen the node is a NetworkNodeWithRetrofit, it returns the co2_proxy resource in addition to the keys of the output dictionary.\n\nIf the resource p is specified, it returns the value of output resource p or 0 if p is the co2_proxy resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#int-methods_EMB-check","page":"Methods - EnergyModelsBase","title":"Check methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.check_node","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.check_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.check_node","text":"EMB.check_node(n::CO2Source, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that a CO2Source node is valid.\n\nIt reuses the standard checks of a Source node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe field cap is required to be non-negative.\nThe values of the dictionary output are required to be non-negative.\nThe value of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles).\nThe field data does not include CaptureData.\n\n\n\n\n\n","category":"function"},{"location":"how-to/incorporate_retrofit/#how_to-incorp_retrofit","page":"Incorporate CO₂ capture retrofit in other nodes","title":"Incorporate CO₂ capture retrofit in other nodes","text":"","category":"section"},{"location":"how-to/incorporate_retrofit/","page":"Incorporate CO₂ capture retrofit in other nodes","title":"Incorporate CO₂ capture retrofit in other nodes","text":"You can find the mathematical description of the incorporation on the CO₂ capture retrofit page. The mathematical description explains as well the required changes to a RefNetworkNode to allow for incorporating CO₂ capture retrofit. All created methods for the existing functions are however created for the abstract supertype NetworkNodeWithRetrofit Hence, it is also possible for the user to create separate nodes that allow for CO₂ capture retrofit.","category":"page"},{"location":"how-to/incorporate_retrofit/","page":"Incorporate CO₂ capture retrofit in other nodes","title":"Incorporate CO₂ capture retrofit in other nodes","text":"Creating a new type for retrofit, that is, e,g,, with differing additional constraints is in general simple. The new type only has the following requirements:","category":"page"},{"location":"how-to/incorporate_retrofit/","page":"Incorporate CO₂ capture retrofit in other nodes","title":"Incorporate CO₂ capture retrofit in other nodes","text":"Is has to be a subtype of NetworkNodeWithRetrofit. This implies that said node is a NetworkNode, although we are currently thinking about changing the overall structure.\nThe type must have either a field called co2_proxy or you have to add a method to the function EnergyModelsCO2.co2_proxy of EnergyModelsCO2.\nCO₂ capture data has to be incorporated as one of the CaptureData subtypes  as described on Data functions.\nIf you have created a new method for  EnergyModelsBase.create_node, you have to include in said method the following code lines\nfor data ∈ node_data(n)\n    constraints_data(m, n, 𝒯, 𝒫, modeltype, data)\nend\nand the node must have either a field called data or you have to add a method to the function EnergyModelsBase.node_data to be able to access the data.\nAlternatively, you can also manually extract the capture data and call directlty the functions constraints_data","category":"page"},{"location":"nodes/storage/#nodes-co2_storage","page":"CO₂ storage","title":"CO₂ storage node","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The reference storage node, RefStorage is quite flexible with respect to the individual storage behaviours, that is cyclic (both representative and strategic) or accumulating as it is included as parametric type using the individual storage behaviours. In addition, it allows for both charge and level different storage parameters. It is however not possible at the moment to consider a storage balance between different strategic periods and the accumulation of CO₂ in the storage node.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"Hence, it is necessary to include a specific CO₂ storage node","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-fields","page":"CO₂ storage","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The CO2Storage node is similar to a RefStorage with minor modifications to the implemented constraints. It introduces a new storage behavior to accomodate for the implementation of coupling the storage level balances between different strategic periods. This storage behavior is called EnergyModelsCO2.AccumulatingStrategic.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"info: `StorageBehaviour` for `CO2Storage` nodes\nCO2Storage nodes utilize an inner constructor for specifying the storage behavior. This means that they can only be created with EnergyModelsCO2.AccumulatingStrategic. If you plan to include a temporary CO₂ storage node, e.g. for storing captured CO₂ for subsequent  utilization, it is best to utilize the RefStorage node.","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-fields-stand","page":"CO₂ storage","title":"Standard fields","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The standard fields are given as:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncharge::EMB.UnionCapacity:\nThe charge storage parameters must include a capacity. More information can be found on storage parameters.\nlevel::EMB.UnionCapacity:\nThe level storage parameters must include a capacity. More information can be found on storage parameters.\nnote: Permitted values for storage parameters in `charge` and `level`\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. Similarly, you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. The variable operating expenses can be provided as OperationalProfile as well. In addition, all capacity and fixed OPEX values have to be non-negative.\nstor_res::ResourceEmit:\nThe stor_res is the stored Resource. It must correspond to your CO₂ instance specified in the EnergyModel.\ninput::Dict{<:Resource, <:Real}:\nThe field input includes Resources with their corresponding conversion factors as dictionaries. In the case of a CO₂ storage node, input should always include CO₂ (the actual conversion value is not relevant as it is not utilized). It is also possible to include other resources which are required with a given correlation to the stored CO₂. One example would be Power in the case of electricity requirements for storing CO₂.\nAll values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"danger: The field `output`\nCO₂ storage nodes do not allow for the specification of an outlet field. Their sole intention is to serve as permanent storage nodes. Hence, although the field output is included in the composite type, it cannot be provided.","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-fields-new","page":"CO₂ storage","title":"Additional fields","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"CO2Storage nodes do not add additional fields compared to RefStorage nodes.","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math","page":"CO₂ storage","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"with paranthesis.","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-var","page":"CO₂ storage","title":"Variables","text":"","category":"section"},{"location":"nodes/storage/#nodes-co2_storage-math-var-stand","page":"CO₂ storage","title":"Standard variables","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The CO₂ storage node types utilize all standard variables from RefStorage, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttopex_var\ntextttopex_fixed\ntextttstor_level\ntextttstor_level_inst\ntextttstor_charge_use\ntextttstor_charge_inst\ntextttstor_discharge_use\ntextttflow_in\ntextttflow_out\ntextttstor_level_Δ_op\ntextttstor_level_Δ_rp if the TimeStruct includes RepresentativePeriods\ntextttemissions_node","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttstor_discharge_inst is not created for CO2Storage nodes as we do not specify a discharge field. The variables textttstor_discharge_use are created by default in EnergyModelsBase. They are however fixed to 0 for CO2Storage nodes","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-add","page":"CO₂ storage","title":"Additional variables","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"CO2Storage nodes have to keep track of the stored CO₂ in each strategic period. Hence, a single additional variable is declared through dispatching on the method EnergyModelsBase.variables_node() and utilizing SparseVariables:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttstor_level_Δ_spn t_inv: Stored CO₂ in storage node n in strategic period t_inv with a typical unit of t/a.\nThe stored CO₂ in each strategic period is a rate specifying how much CO₂ is stored within a given strategic period. Hence, it is important to consider the used duration for strategic periods (see Utilize TimeStruct for an explanation).","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-con","page":"CO₂ storage","title":"Constraints","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The following sections omit the direct inclusion of the vector of CO₂ storage nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N^textCO_2_storage for all CO2Source types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-con-stand","page":"CO₂ storage","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"CO₂ storages nodes utilize in general the standard constraints described on Constraint functions for RefStorage nodes. These standard constraints are:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"constraints_capacity_installed:\nbeginaligned\ntextttstor_level_instn t  = capacity(level(n) t) \ntextttstor_charge_instn t  = capacity(charge(n) t)\nendaligned\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_level:\nThe level constraints are in general following the default approach with minor modifications. They are explained in detail below in Level constraints.\nconstraints_opex_fixed:\nbeginaligned\ntextttopex_fixedn t_inv =  \n  opex_fixed(level(n) t_inv) times textttstor_level_instn first(t_inv) +  \n  opex_fixed(charge(n) t_inv) times textttstor_charge_instn first(t_inv)\nendaligned\ntip: Why do we use `first()`\nThe variables textttstor_level_inst are declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacities in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\nbeginaligned\ntextttopex_varn t_inv =  sum_t in t_inv\n  opex_var(level(n) t) times textttstor_leveln t times scale_op_sp(t_inv t) +  \n  opex_var(charge(n) t) times textttstor_charge_usen t times scale_op_sp(t_inv t)\nendaligned\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the CO₂ storage node, see above.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"info: Implementation of OPEX\nThe fixed and variable OPEX contribution for the level and the charge capacities are only included if the corresponding storage parameters have a field opex_fixed and opex_var, respectively. Otherwise, they are omitted.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The function constraints_capacity is extended with a new method for CO₂ storage nodes to allow for accounting for the upper bound of stored CO₂ in strategic periods.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The standard constraints given by","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"beginaligned\ntextttstor_level_instn t  geq textttstor_leveln t \ntextttstor_charge_instn t  geq textttstor_charge_usen t \nendaligned","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"are extended with a constraint on the total stored amount of CO₂ given as:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttstor_level_instn first(t_inv) geq sum_k=first(T^inv)^t_inv textttstor_level_Δ_spn k times duration_strat(k)","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"This constraint ensures that the sum off all stored CO₂ up to and including a given strategic period t_inv is constrained to the upper limit, even when considering the duration of the strategic periods.","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-con-add","page":"CO₂ storage","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/storage/#nodes-co2_storage-math-con-add-node","page":"CO₂ storage","title":"Constraints calculated in create_node","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The inlet flow constraints are given as","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"beginaligned\n  textttflow_inn t p  =\n  inputs(n p) times textttstor_charge_usen t\n  qquad forall p in inputs(n) setminus textCO_2 \n\n  textttflow_inn t textCO_2  =\n  textttstor_charge_usen t + textttemissions_noden t textCO_2\nendaligned","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"This constraint allows the CO₂ storage node to act as CO₂ emitter in cases in which the storage capacity is exceeded. As the variable textttemissions_node has by default no lower bound this is enforced in the function for CO₂:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttemissions_noden t textCO_2 geq 0","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"As a CO₂ storage node should not include emissions other CO₂. These are hence fixed for all other ResourceEmit P^em setminus textCO_2 to 0:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttemissions_noden t p_em = 0 qquad forall p_em in P^em setminus textCO_2","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"Similarly, all outlet flows and the discharge rates are fixed to 0:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"beginaligned\n  textttflow_outn t p  = 0 qquad forall p in outputs(n p) \n\n  textttstor_discharge_usen t  = 0\nendaligned","category":"page"},{"location":"nodes/storage/#nodes-co2_storage-math-con-add-level","page":"CO₂ storage","title":"Level constraints","text":"","category":"section"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The level constraints are in general slightly more complex to understand. The overall structure is outlined on Constraint functions. The level constraints are called through the function constraints_level which then calls additional functions depending on the chosen time structure (whether it includes representative periods and/or operational scenarios) and the chosen storage behaviour.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The CO₂ storage node utilizes the majority of the concepts from EnergyModelsBase but requires adjustments for both constraining the variable textttstor_level_Δ_sp and specifying how the storage node has to behave in the first operational period (of the first representative period) of a strategic period. This is achieved through dispatching on the functions constraints_level_aux and previous_level.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The constraints introduced in constraints_level_aux are given by","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"beginaligned\n  textttstor_level_Δ_opn t  = textttstor_charge_usen t \n\n  textttstor_level_Δ_spn t_inv  = sum_t in t_inv\n  textttstor_level_Δ_opn t times scale_op_sp(t_inv t)\nendaligned","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"corresponding to the change in the storage level in an operational period and strategic period, respectively.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"If the time structure includes representative periods, we also calculate the change of the storage level in each representative period within the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"  textttstor_level_Δ_rpn t_rp = sum_t in t_rp\n  textttstor_level_Δ_opn t times scale_op_sp(t_inv t)","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The general level constraint is calculated in the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"textttstor_leveln t = prev_level +\ntextttstor_level_Δ_opn t times duration(t)","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"in which the value prev_level is depending on the type of the previous operational (t_prev) and strategic level (t_invprev) (as well as the previous representative period (t_rpprev)). It is calculated through the function previous_level.","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"In the case of CO₂ storage node, we can distinguish the following cases:","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"The first operational period in the first representative period in the first strategic period (given by typeof(t_prev) = typeof(t_rp prev) = typeof(t_invprev) = nothing):\n\nprev_level = 0\nThe first operational period in the first representative period in subsequent strategic period (given by typeof(t_prev) = typeof(t_rp prev) = nothing):\n\nbeginaligned\n prev_level =  textttstor_leveln first(t_invprev) -  \n   textttstor_level_Δ_opn first(t_invprev) times duration(first(t_invprev)) +  \n   textttstor_level_Δ_spn t_invprev times duration_strat(t_invprev)\nendaligned\nThe first operational period in subsequent representative periods in any strategic period (given by typeof(t_prev) = nothing):\n\nbeginaligned\n prev_level =  textttstor_leveln first(t_rpprev) -  \n   textttstor_level_Δ_opn first(t_rpprev) times duration(first(t_rpprev)) +  \n   textttstor_level_Δ_rpn t_rpprev\nendaligned\nThis situation only occurs in cases in which the time structure includes representative periods.\nAll other operational periods:\n\n prev_level = textttstor_leveln t_prev","category":"page"},{"location":"nodes/storage/","page":"CO₂ storage","title":"CO₂ storage","text":"Cases 1 and 2 are implemented within EnergyModelsCO2 for CO2Storage nodes while cases 3 and 4 are implemented in EnergyModelsBase.","category":"page"},{"location":"library/internals/methods-fields/#int-methods_fields","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"","category":"section"},{"location":"library/internals/methods-fields/#Index","page":"Methods - Accessing fields","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"Pages = [\"methods-fields.md\"]","category":"page"},{"location":"library/internals/methods-fields/#int-methods_fields-node","page":"Methods - Accessing fields","title":"Node","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsCO2.co2_proxy","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsCO2.co2_proxy","page":"Methods - Accessing fields","title":"EnergyModelsCO2.co2_proxy","text":"co2_proxy(n::EMB.Node)\n\nExtract the instance of the CO₂ proxy. This function is available for all node types but will provide an error if the node type does not support CO₂ capture retrofit.\n\n\n\n\n\n","category":"function"},{"location":"manual/NEWS/#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"manual/NEWS/#Version-0.7.5-(2024-11-03)","page":"Release notes","title":"Version 0.7.5 (2024-11-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix of a bug introduced in 0.7.4.\nAdjusted the tests to identify similar bugs in later stages.","category":"page"},{"location":"manual/NEWS/#Version-0.7.4-(2024-11-29)","page":"Release notes","title":"Version 0.7.4 (2024-11-29)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Included changes for CO2Storage to not require the definition of variables that are not used.\nIncluded check changes from EnergyModelsBase.\nFixed minor errors in the documentation.","category":"page"},{"location":"manual/NEWS/#Version-0.7.3-(2024-10-16)","page":"Release notes","title":"Version 0.7.3 (2024-10-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor changes to the documentation and docstrings.\nMinor rewriting of constraints and fixing variables.\nAdjusted to EnergyModelsBase v0.8.1:\nUse of the function scale_op_sp.\nRework based on the introduction of :stor_level_Δ_sp in EnergyModelsBase as sparse variable.","category":"page"},{"location":"manual/NEWS/#Version-0.7.2-(2024-09-03)","page":"Release notes","title":"Version 0.7.2 (2024-09-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Dependency increase for EnergyModelsBase as the changes do not directly affect EnergyModelsCO2.\nAdjustment of the interlinks to the changes in the structure of EnergyModelsBase.\nFixed additional errors in the documentation.\nAdded page for the examples in the documentation.","category":"page"},{"location":"manual/NEWS/#Version-0.7.1-(2024-08-16)","page":"Release notes","title":"Version 0.7.1 (2024-08-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Removed requirement for specifying the co2_proxy resource as output of the NetworkNodeWithRetrofit node and input to the CCSRetroFit node through addding methods for EMB.outputs and EMB.inputs. This implies that both are no longer specified within the input and output dictionary, and all functionality directly accessing the fields may result in errors.\nAdjusted documentation to deploy to the proper site.\nRemoved pre-release statements.","category":"page"},{"location":"manual/NEWS/#Version-0.7.0-(2024-08-15)","page":"Release notes","title":"Version 0.7.0 (2024-08-15)","text":"","category":"section"},{"location":"manual/NEWS/#Feature","page":"Release notes","title":"Feature","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added support for CaptureProcessEmissions for CCSRetroFit nodes.\nChanged the name of CaptureNone to CaptureFlueGas while incorporating a constructor for the old version.\nChanged the name of NetworkCCSRetrofit to RefNetworkNodeRetrofit while incorporating a constructor for the old version. The aim is to follow more closely the names in EnergyModelsBase.\nIntroduced supertype NetworkNodeWithRetrofit to allow the application of the functionality in other packages.","category":"page"},{"location":"manual/NEWS/#Bugfix","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Upper limit of the capacity of CO₂ storage nodes:\nIt was in previous analyses never active, but may result in errors, if the duration of strategic periods is large.\nIt can result in overestimating the storage potential as the last strategic period in which the storage is filled is not fully included in the bound.\nMaximum CO₂ capture when using CaptureEnergyEmissions or CaptureProcessEnergyEmissions:\nThe maximum capture limit was to tight as it did not include potential additional capture fom energy related or process emissions within the node.\nBoth were included now.","category":"page"},{"location":"manual/NEWS/#Documentation","page":"Release notes","title":"Documentation","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Restructured the examples:\nAdded the examples to the testing routine.\nAdded an exasmple for CO₂ capture retrofit.\nExtended extensively the comments of the examples to improve understandability.\nIncorporated a new structure for the documentation, including usage of @docs blocks and a structured approach.\nProvided separate pages for all introduced nodal types.\nAdded a \"how to contribute\" page.","category":"page"},{"location":"manual/NEWS/#Version-0.6.0-(2024-05-28)","page":"Release notes","title":"Version 0.6.0 (2024-05-28)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EMB v0.7.0 introducing the concept of StorageBehavior and AbstractStorageParameters.\nCO2Storage nodes should only use AccumulatingStrategic, an internal subtype.\nCO2Storage nodes have now the potential for both charge and level OPEX, also the latter seems irrelevant\nInclusion of CO2Storage nodes as potential CO₂ emitter.","category":"page"},{"location":"manual/NEWS/#Version-0.5.2-(2024-01-18)","page":"Release notes","title":"Version 0.5.2 (2024-01-18)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EMB v0.6.4 allowing for allowing time dependent process emissions.","category":"page"},{"location":"manual/NEWS/#Version-0.5.1-(2024-01-17)","page":"Release notes","title":"Version 0.5.1 (2024-01-17)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Update the methods constraints_level_aux and constraints_level to match the signature updates for these methods in EnergyModelsBase. This includes renaming constraints_level to constraints_level_sp.","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-12-19)","page":"Release notes","title":"Version 0.5.0 (2023-12-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to changes in EnergyModelsBase v0.6.\nIncluded handling of representative periods for CO2Storage.\nAdded a new idea for reducing repetitions in Storage nodes. This implementation can be, if considered robust, included for all Storage nodes.\nAdded a new node CO2Source <: Source. The recent changes of EnergyModelsBase required that a potential CO₂ source could no longer be modelled using the RefSource node.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-09-27)","page":"Release notes","title":"Version 0.4.0 (2023-09-27)","text":"","category":"section"},{"location":"manual/NEWS/#Implemented-two-nodes-related-to-retrofit-of-CCS","page":"Release notes","title":"Implemented two nodes related to retrofit of CCS","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Both nodes have to be used together for proper analysis.\nNetworkCCSRetrofit <: NetworkNode is a node to which CCS can be implemented as a retrofit.\nCCSRetroFit <: NetworkNode is a node where the investments lead to the potential of utilizing CO2 capture. If the node has no capacity, then all CO₂ is emitted.","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2023-06-06)","page":"Release notes","title":"Version 0.3.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct","page":"Release notes","title":"Switch to TimeStruct","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.\nTimeStruct is implemented with only the basis features that were available in TimesStructures. This implies that neither operational nor strategic uncertainty is included in the model.","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2023-05-30)","page":"Release notes","title":"Version 0.2.0 (2023-05-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v0.4.0 related to extra input data.","category":"page"},{"location":"manual/NEWS/#Version-0.1.2-(2023-05-15)","page":"Release notes","title":"Version 0.1.2 (2023-05-15)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v0.3.3 related to the calls for the constraint functions.","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2023-04)","page":"Release notes","title":"Version 0.1.1 (2023-04)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix on storage level in operational periods.","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2023-04)","page":"Release notes","title":"Version 0.1.0 (2023-04)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Implement a node CO2Storage <: Storage. The storage level will accumulate over the strategic periods.","category":"page"},{"location":"#EnergyModelsCO2","page":"Home","title":"EnergyModelsCO2","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package implements three new nodes with corresponding JuMP variables and constraints, extending the package EnergyModelsBase with more detailed representation of technologies within the CO₂ capture, transport, and storage value chain.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It implements the following new technology nodes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"a Source node CO2Source,\na Storage node CO2Storage,\na Network node RefNetworkNodeRetrofit to which CCS can be retrofitted, and\na Network node CCSRetroFit that corresponds to the unit that captures CCS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The new introduced node types are also documented on the individual node pages.","category":"page"},{"location":"#Developed-nodes","page":"Home","title":"Developed nodes","text":"","category":"section"},{"location":"#[CO2Source](@ref)","page":"Home","title":"CO2Source","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main difference from a regular RefSource-node is that the CO2Source allows for the CO₂ instance to be an output","category":"page"},{"location":"#[CO2Storage](@ref)","page":"Home","title":"CO2Storage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main difference from a regular Storage-node is that the CO2Storage will not reset the storage level at the beginning of each strategic period, but the level will accumulate across the strategic periods. This allows for proper accounting for the total stored CO₂. In addition, it takes the total storage limit into account.","category":"page"},{"location":"#[RefNetworkNodeRetrofit](@ref)","page":"Home","title":"RefNetworkNodeRetrofit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main difference from a regular RefNetworkNode-node is that it does not directly emit CO₂. Instead, a proxy CO₂ is produced that leaves the node in the output. It cannot be used as standalone, but instead requires the inclusion of a CCSRetroFit, either directly coupled, or alternatively via an Availability node.","category":"page"},{"location":"#[CCSRetroFit](@ref)","page":"Home","title":"CCSRetroFit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The CCSRetroFit-node has to be coupled with a RefNetworkNodeRetrofit node. In the base case, when the installed capacity is 0, all CO₂ entering the node is emitted. The CO₂ is captured, if a given capacity is installed. However, it only captures the proxy CO₂ resource and not process or energy use related emissions.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/simple-example.md\",\n    \"manual/NEWS.md\",\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-nodes","page":"Home","title":"Description of the nodes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"nodes/source.md\",\n    \"nodes/storage.md\",\n    \"nodes/retrofit.md\",\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"how-to/contribute.md\",\n    \"how-to/incorporate_retrofit.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/types.md\",\n    \"library/internals/methods-fields.md\",\n    \"library/internals/methods-EMB.md\",\n]\nDepth = 1","category":"page"},{"location":"library/public/#lib-pub","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#lib-pub-module","page":"Public","title":"Module","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsCO2","category":"page"},{"location":"library/public/#EnergyModelsCO2","page":"Public","title":"EnergyModelsCO2","text":"EnergyModelsCO2 is representing several technologies that are relevant within CO₂ capture, transport, utilization, and storage chains.\n\n\n\n\n\n","category":"module"},{"location":"library/public/#lib-pub-node","page":"Public","title":"Node types","text":"","category":"section"},{"location":"library/public/#lib-pub-node-gen","page":"Public","title":"General nodes","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"CO2Source\nCO2Storage","category":"page"},{"location":"library/public/#EnergyModelsCO2.CO2Source","page":"Public","title":"EnergyModelsCO2.CO2Source","text":"CO2Source <: Source\n\nA CO₂ Source node. Its only difference from a RefSource is that is allows for CO₂ as outlet.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed capacity.\nopex_var::TimeProfile is the variational operational costs per energy unit produced.\nopex_fixed::TimeProfile is the fixed operational costs.\noutput::Dict{<:Resource, <:Real} are the generated Resources with conversion value Real.\ndata::Array{<:Data} is the additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsCO2.CO2Storage","page":"Public","title":"EnergyModelsCO2.CO2Storage","text":"CO2Storage{T} <: Storage{T}\n\nThis node has an installed injection rate capacity through charge and a storage capacity level.\n\nThe storage level (accountet by the optimization variable stor_level) will increase during all strategic periods (sp), i.e., the stored resource can not be taken out of the storage.\n\nThe initial storage level in a strategic period is set to the storage level at the end of the prevoious sp. Note that the increased storage level during a sp is multiplied with the length of the sp when the initial storage level for the next sp is set.\n\nThis is achieved through the parametric input AccumulatingStrategic. This input is not a required input due to the utilization of an inner constructor.\n\nFields\n\nid is the name/identifyer of the node.\ncharge::EMB.UnionCapacity are the charging parameters of the CO2Storage node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\nlevel::EMB.UnionCapacity are the level parameters of the CO2Storage node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\nstor_res::Resource is the stored Resource.\ninput::Dict{<:Resource, <:Real} are the input Resources with conversion value Real.\ndata::Array{<:Data} is the additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-retrofit","page":"Public","title":"CO₂ capture retrofit nodes","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"NetworkNodeWithRetrofit\nRefNetworkNodeRetrofit\nCCSRetroFit","category":"page"},{"location":"library/public/#EnergyModelsCO2.NetworkNodeWithRetrofit","page":"Public","title":"EnergyModelsCO2.NetworkNodeWithRetrofit","text":"NetworkNodeWithRetrofit <:NetworkNode\n\nAbstract supertype for allowing retrofitting CO₂ capture to a node. Its application requires the user to\n\ndefine their own node as subtype of NetworkNodeWithRetrofit and\ninclude a field co2_proxy in said node or alternatively define a method for co2_proxy for the node.\n\nThe application is best explained by RefNetworkNodeRetrofit which illustrates it for a RefNetworkNode node.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsCO2.RefNetworkNodeRetrofit","page":"Public","title":"EnergyModelsCO2.RefNetworkNodeRetrofit","text":"RefNetworkNodeRetrofit <: NetworkNodeWithRetrofit\n\nThis node allows for retrofitting CO₂ capture to a NetworkNode.\n\nIt corresponds to a RefNetworkNode node in which the CO₂ is not emitted. Instead, it is transferred to a co2_proxy that is fed subsequently to a node (CCSRetroFit) in which it is either captured, or emitted.\n\nThe co2_proxy does not have to be specified as output resource.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed capacity.\nopex_var::TimeProfile is the variational operational costs per energy unit produced.\nopex_fixed::TimeProfile is the fixed operational costs.\ninput::Dict{<:Resource, <:Real} are the input Resources with conversion value Real.\noutput::Dict{<:Resource, <:Real} are the generated Resources with conversion value Real. co2_proxy is required to be included to be available to have CO₂ capture applied properly.\nco2_proxy::Resource is the instance of the Resource used for calculating internally the CO₂ flow from the RefNetworkNodeRetrofit to the CCSRetroFit node.\ndata::Array{<:Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsCO2.CCSRetroFit","page":"Public","title":"EnergyModelsCO2.CCSRetroFit","text":"CCSRetroFit <: Network\n\nThis node allows for investments into CO₂ capture retrofit to a RefNetworkNodeRetrofit node. The capture process is implemented through the variable :cap_use\n\nThe co2_proxy does not have to be specified as input resource.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed capacity.\nopex_var::TimeProfile is the variational operational costs per unit CO2 captured.\nopex_fixed::TimeProfile is the fixed operational costs.\ninput::Dict{<:Resource, <:Real} are the input Resources with conversion value Real.\noutput::Dict{<:Resource, <:Real} are the generated Resources with conversion value Real. The CO₂ instance is required to be included to be available to have CO₂ capture applied properly.\nco2_proxy::Resource is the instance of the Resource used for calculating internally the CO₂ flow from the RefNetworkNodeRetrofit to the CCSRetroFit node.\ndata::Array{<:Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-legacy","page":"Public","title":"Legacy constructors","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"NetworkCCSRetrofit","category":"page"},{"location":"library/public/#EnergyModelsCO2.NetworkCCSRetrofit","page":"Public","title":"EnergyModelsCO2.NetworkCCSRetrofit","text":"NetworkCCSRetrofit(args)\n\nLegacy constructor NetworkCCSRetrofit This type was renamed to RefNetworkNodeRetrofit while everything else remains the same.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#lib-pub-data","page":"Public","title":"Data types","text":"","category":"section"},{"location":"library/public/#lib-pub-data-em_data","page":"Public","title":"CaptureData for CCSRetrofit","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"CaptureFlueGas","category":"page"},{"location":"library/public/#EnergyModelsCO2.CaptureFlueGas","page":"Public","title":"EnergyModelsCO2.CaptureFlueGas","text":"CaptureFlueGas{T} <: CaptureData{T}\n\nCapture the proxy CO₂ instance but not the energy usage related emissions and the process emissions. Does not require emissions as input, but can be supplied.\n\nFields\n\nemissions::Dict{ResourceEmit, T} are the emissions per unit produced.\nco2_capture::Float64 is the CO₂ capture rate.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-data-legacy","page":"Public","title":"Legacy constructors","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"CaptureNone","category":"page"},{"location":"library/public/#EnergyModelsCO2.CaptureNone","page":"Public","title":"EnergyModelsCO2.CaptureNone","text":"CaptureNone(emissions::Dict{ResourceEmit,T}, co2_capture::Float64)\n\nLegacy constructor for a CaptureNone. This type was renamed to CaptureFlueGas while everything else remains the same.\n\n\n\n\n\n","category":"function"}]
}
